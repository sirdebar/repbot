# main.py

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram import F
  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
 # –§–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–∞
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
ADMIN_USERNAME = "DxxmII"  # –ó–∞–¥–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("reputation.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    tg_id INTEGER PRIMARY KEY,
    username TEXT,
    reputation INTEGER DEFAULT 0
)
""")
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–π—Ç–∏"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    username = message.from_user.username or f"user_{tg_id}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (tg_id, username) VALUES (?, ?)", (tg_id, username))
        conn.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} (@{username})")
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} (@{username}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    await message.answer(f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message(Text("–ü—Ä–æ—Ñ–∏–ª—å"))
async def view_profile(message: types.Message):
    tg_id = message.from_user.id
    cursor.execute("SELECT reputation FROM users WHERE tg_id = ?", (tg_id,))
    user = cursor.fetchone()
    
    if user:
        reputation = user[0]
        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è {tg_id}")
        await message.answer(f"**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: **{reputation}**")
    else:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é {tg_id}")
        await message.answer("**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.**")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏"
@dp.message(Text("–ù–∞–π—Ç–∏"))
async def find_user(message: types.Message):
    await message.answer("**–í–≤–µ–¥–∏—Ç–µ @—Ç–µ–≥ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**")

@dp.message(lambda msg: msg.text.startswith("@") or msg.text.isdigit())
async def search_user(message: types.Message):
    input_data = message.text.strip()
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if input_data.startswith("@"):
        username = input_data[1:]
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        user = cursor.fetchone()
    else:
        try:
            tg_id = int(input_data)
            cursor.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))
            user = cursor.fetchone()
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: {input_data}")
            await message.answer("**–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.**")
            return
    
    if user:
        tg_id, username, reputation = user
    else:
        try:
            user_info = await bot.get_chat(int(input_data) if input_data.isdigit() else input_data)
            tg_id = user_info.id
            username = user_info.username or f"user_{tg_id}"
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            cursor.execute("INSERT INTO users (tg_id, username) VALUES (?, ?)", (tg_id, username))
            conn.commit()
            reputation = 0
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –¥–ª—è {tg_id} (@{username})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.**")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile_text = f"**–ü—Ä–æ—Ñ–∏–ª—å @{username}**\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: **{'‚àû' if username == ADMIN_USERNAME else reputation}**"
    buttons = [
        [InlineKeyboardButton(text="üü¢ +REP", callback_data=f"add_{tg_id}"),
         InlineKeyboardButton(text="üî¥ -REP", callback_data=f"sub_{tg_id}")]
    ]
    if message.from_user.username == ADMIN_USERNAME and username != ADMIN_USERNAME:
        buttons.append([InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é", callback_data=f"reset_{tg_id}")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(profile_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ +, -, –û—á–∏—Å—Ç–∏—Ç—å
@dp.callback_query(Text(startswith="add_"))
async def increase_reputation(callback: types.CallbackQuery):
    tg_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE users SET reputation = reputation + 1 WHERE tg_id = ?", (tg_id,))
    conn.commit()
    logger.info(f"–†–µ–ø—É—Ç–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–ª—è {tg_id}")
    await callback.answer("–†–µ–ø—É—Ç–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞!")

@dp.callback_query(Text(startswith="sub_"))
async def decrease_reputation(callback: types.CallbackQuery):
    tg_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE users SET reputation = reputation - 1 WHERE tg_id = ?", (tg_id,))
    conn.commit()
    logger.info(f"–†–µ–ø—É—Ç–∞—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–ª—è {tg_id}")
    await callback.answer("–†–µ–ø—É—Ç–∞—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞!")

@dp.callback_query(Text(startswith="reset_"))
async def reset_reputation(callback: types.CallbackQuery):
    tg_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE users SET reputation = 0 WHERE tg_id = ?", (tg_id,))
    conn.commit()
    logger.info(f"–†–µ–ø—É—Ç–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è {tg_id}")
    await callback.answer("–†–µ–ø—É—Ç–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
