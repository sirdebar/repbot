# main.py
import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from database import (
    create_or_get_user, update_username, get_user_by_tg_id, get_user_by_username,
    update_reputation, reset_reputation, add_review, get_reviews,
    can_change_reputation, update_reputation_change_time
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "8126821875:AAGaonnOxupN1rpWpoL6Y8_6BBMl2OAo7mA"
ADMIN_USERNAME = "DxxmII"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–π—Ç–∏"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")]],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReviewStates(StatesGroup):
    waiting_for_review = State()

class ReviewsPagination(StatesGroup):
    viewing_reviews = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∂–∏—Ä–Ω—ã–µ —Ç–µ–≥–∏
def bold(text: str) -> str:
    return f"<b>{text}</b>"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_handler(message: types.Message):
    tg_id = message.from_user.id
    username = message.from_user.username or f"user_{tg_id}"

    user = create_or_get_user(tg_id, username)
    update_username(tg_id, username)

    await message.answer(
        bold(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    tg_id = message.from_user.id
    user = get_user_by_tg_id(tg_id)

    if user:
        _, _, reputation = user
        reviews = get_reviews(tg_id, limit=1, offset=0)
        reviews_text = f"\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤: {reviews[0][0]}" if reviews else "\n\n–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        await message.answer(bold(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}{reviews_text}"))
    else:
        await message.answer(bold("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start."))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏"
@router.message(F.text == "–ù–∞–π—Ç–∏")
async def find_handler(message: types.Message):
    await message.answer(bold("–í–≤–µ–¥–∏—Ç–µ @—Ç–µ–≥ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"))

# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text.regexp(r"^@|^\d+$"))
async def search_user_handler(message: types.Message):
    input_data = message.text.strip()
    user_info = None

    if input_data.startswith("@"):
        username = input_data[1:]
        user_info = get_user_by_username(username)
    elif input_data.isdigit():
        tg_id = int(input_data)
        user_info = get_user_by_tg_id(tg_id)

    if user_info:
        tg_id, username, reputation = user_info
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            tg_user = await bot.get_chat(input_data if input_data.startswith("@") else int(input_data))
            tg_id = tg_user.id
            username = tg_user.username or f"user_{tg_id}"
            create_or_get_user(tg_id, username)
            reputation = 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await message.answer(bold("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."))
            return

    # –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    if tg_id == message.from_user.id:
        await message.answer(bold("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é."))
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    buttons = [
        [InlineKeyboardButton(text="üü¢ +REP", callback_data=f"add_{tg_id}"),
         InlineKeyboardButton(text="üî¥ -REP", callback_data=f"sub_{tg_id}")],
        [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", callback_data=f"reviews_{tg_id}")]
    ]
    if message.from_user.username == ADMIN_USERNAME:
        buttons.append([InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é", callback_data=f"reset_{tg_id}")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    reputation_display = "‚àû" if username == ADMIN_USERNAME else reputation
    await message.answer(
        bold(f"–ü—Ä–æ—Ñ–∏–ª—å @{username}\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation_display}"),
        reply_markup=markup
    )
