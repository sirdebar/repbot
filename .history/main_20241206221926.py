import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from database import (
    create_or_get_user, update_username, get_user_by_tg_id, get_user_by_username,
    update_reputation, reset_reputation, add_review, get_reviews,
    can_change_reputation, update_reputation_change_time, add_user, update_tg_id_for_user,
    update_related_tg_id
)
import random
from aiogram.exceptions import TelegramBadRequest

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "8126821875:AAGaonnOxupN1rpWpoL6Y8_6BBMl2OAo7mA"
ADMIN_USERNAME = "sirdebar"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–π—Ç–∏"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")]],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ReviewStates(StatesGroup):
    waiting_for_review = State()

class ReviewsPagination(StatesGroup):
    viewing_reviews = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∂–∏—Ä–Ω—ã–µ —Ç–µ–≥–∏
def bold(text: str) -> str:
    return f"<b>{text}</b>"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
EMOJIS = ["üêº", "üêª", "ü¶ä", "üê®", "üê∏"]

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
class CaptchaStates(StatesGroup):
    solving_captcha = State()

@router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    tg_id = message.from_user.id
    username = message.from_user.username or f"user_{tg_id}"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
    correct_emoji = random.choice(EMOJIS)  # –°–º–∞–π–ª–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å
    shuffled_emojis = random.sample(EMOJIS, len(EMOJIS))  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤
    buttons = [[InlineKeyboardButton(text=emoji, callback_data=f"captcha_{emoji}")]
               for emoji in shuffled_emojis]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    await state.set_state(CaptchaStates.solving_captcha)
    await state.update_data(correct_emoji=correct_emoji)

    await message.answer(
        bold(f"–ö–∞–ø—á–∞: –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —ç—Ç–∏–º —Å–º–∞–π–ª–∏–∫–æ–º {correct_emoji}"),
        reply_markup=markup
    )

@router.callback_query(F.data.startswith("captcha_"))
async def captcha_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    correct_emoji = data.get("correct_emoji")
    selected_emoji = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–º–∞–π–ª–∏–∫

    if selected_emoji == correct_emoji:
        # –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
        await state.clear()
        await callback.message.delete()
        await callback.answer("–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!", show_alert=True)

        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        tg_id = callback.from_user.id
        username = callback.from_user.username or f"user_{tg_id}"
        existing_user = get_user_by_username(username)

        if existing_user:
            existing_tg_id, _, reputation = existing_user
            if existing_tg_id != tg_id:
                update_tg_id_for_user(username, tg_id)
                update_related_tg_id(existing_tg_id, tg_id)
            await callback.message.answer(
                bold(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.full_name}!\n"
                     f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}."),
                reply_markup=main_menu
            )
        else:
            user = create_or_get_user(tg_id, username)
            await callback.message.answer(
                bold(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback.from_user.full_name}!\n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω."),
                reply_markup=main_menu
            )
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–º–∞–π–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∫–∞–ø—á–∏
        correct_emoji = random.choice(EMOJIS)
        shuffled_emojis = random.sample(EMOJIS, len(EMOJIS))
        buttons = [[InlineKeyboardButton(text=emoji, callback_data=f"captcha_{emoji}")]
                   for emoji in shuffled_emojis]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await state.update_data(correct_emoji=correct_emoji)
        await callback.message.edit_text(
            bold(f"–ö–∞–ø—á–∞: –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —ç—Ç–∏–º —Å–º–∞–π–ª–∏–∫–æ–º {correct_emoji}"),
            reply_markup=markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    tg_id = message.from_user.id

    if message.from_user.username == ADMIN_USERNAME:
        await message.answer(bold("–ê–¥–º–∏–Ω—É –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ –º–∞—Å—Ç–∏"))
        return

    user = get_user_by_tg_id(tg_id)

    if user:
        _, _, reputation = user
        reviews = get_reviews(tg_id, limit=1, offset=0)
        reviews_text = f"\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–∑—ã–≤: {reviews[0][0]}" if reviews else "\n\n–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
        await message.answer(bold(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}{reviews_text}"))
    else:
        await message.answer(bold("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start."))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏"
@router.message(F.text == "–ù–∞–π—Ç–∏")
async def find_handler(message: types.Message):
    await message.answer(bold("–í–≤–µ–¥–∏—Ç–µ @—Ç–µ–≥ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"))

@router.message(F.text.regexp(r"^@|^\d+$"))
async def search_user_handler(message: types.Message):
    input_data = message.text.strip()
    user_info = None

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–µ–≥ –∞–¥–º–∏–Ω–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if input_data.startswith("@") and input_data[1:] == ADMIN_USERNAME:
        await message.answer(bold("–ê–¥–º–∏–Ω—É –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é"))
        return

    # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ username –∏–ª–∏ ID
    if input_data.startswith("@"):
        username = input_data[1:]
        user_info = get_user_by_username(username)
    elif input_data.isdigit():
        tg_id = int(input_data)
        user_info = get_user_by_tg_id(tg_id)

    if not user_info:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = input_data[1:] if input_data.startswith("@") else f"user_{input_data}"
        tg_id = int(input_data) if input_data.isdigit() else None

        if tg_id is None:
            tg_id = hash(username) % (10**9)
            logger.warning(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º ID: {tg_id}")

        add_user(tg_id, username)
        reputation = 0
    else:
        tg_id, username, reputation = user_info

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons = [
        [InlineKeyboardButton(text="üü¢ +REP", callback_data=f"add_{tg_id}"),
         InlineKeyboardButton(text="üî¥ -REP", callback_data=f"sub_{tg_id}")],
        [InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", callback_data=f"reviews_{tg_id}")]
    ]

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é"
    if message.from_user.username == ADMIN_USERNAME:
        buttons.append(
            [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é", callback_data=f"reset_{tg_id}")]
        )

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(
        bold(f"–ü—Ä–æ—Ñ–∏–ª—å @{username}\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}"),
        reply_markup=markup
    )



# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("add_") | F.data.startswith("sub_"))
async def reputation_handler(callback: types.CallbackQuery, state: FSMContext):
    action, target_id = callback.data.split("_")

    try:
        target_id = int(target_id)
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    if target_id == callback.from_user.id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é.", show_alert=True)
        return

    if not can_change_reputation(callback.from_user.id, target_id):
        await callback.answer("–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.", show_alert=True)
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    await callback.message.edit_text(bold("–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ (–æ—Ç 5 –¥–æ 40 —Å–ª–æ–≤):"))
    await state.set_state(ReviewStates.waiting_for_review)
    await state.update_data(target_id=target_id, action=action, changer_id=callback.from_user.id)

@router.message(ReviewStates.waiting_for_review)
async def handle_review_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    target_id = data["target_id"]
    action = data["action"]
    changer_id = data["changer_id"]
    review = message.text.strip()

    if not (5 <= len(review.split()) <= 40):
        await message.answer(bold("–û—Ç–∑—ã–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 40 —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"))
        return

    # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ—Ç–∑—ã–≤, –µ—Å—Ç—å –≤ –±–∞–∑–µ
    create_or_get_user(changer_id, message.from_user.username or f"user_{changer_id}")

    update_reputation(target_id, 1 if action == "add" else -1)
    add_review(target_id, changer_id, review)
    update_reputation_change_time(changer_id, target_id)

    user = get_user_by_tg_id(target_id)
    await message.answer(bold(f"–†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user[1]} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
    await state.clear()


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
@router.callback_query(F.data.startswith("reviews_"))
async def show_reviews(callback: types.CallbackQuery, state: FSMContext):
    target_id = int(callback.data.split("_")[1])
    reviews = get_reviews(target_id, limit=1, offset=0)

    if not reviews:
        await callback.message.edit_text(bold("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."))
        return

    review_text, timestamp, changer_username = reviews[0]
    text = f"<b>–û—Ç–∑—ã–≤:</b> {review_text}\n<b>–û—Å—Ç–∞–≤–∏–ª:</b> @{changer_username}\n<b>–î–∞—Ç–∞:</b> {timestamp}"

    buttons = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_{target_id}_0"),
         InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_{target_id}_1")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=markup)

@router.callback_query(F.data.startswith("prev_") | F.data.startswith("next_"))
async def paginate_reviews(callback: types.CallbackQuery):
    action, target_id, offset = callback.data.split("_")
    target_id = int(target_id)
    offset = int(offset)

    new_offset = max(0, offset - 1) if action == "prev" else offset + 1
    reviews = get_reviews(target_id, limit=1, offset=new_offset)

    if not reviews:
        await callback.answer("–ù–µ—Ç –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤.", show_alert=True)
        return

    review_text, timestamp, changer_username = reviews[0]
    text = f"<b>–û—Ç–∑—ã–≤:</b> {review_text}\n<b>–û—Å—Ç–∞–≤–∏–ª:</b> @{changer_username}\n<b>–î–∞—Ç–∞:</b> {timestamp}"

    buttons = [
        [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_{target_id}_{new_offset - 1}"),
         InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_{target_id}_{new_offset + 1}")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=markup)



# –û—á–∏—Å—Ç–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
@router.callback_query(F.data.startswith("reset_"))
async def reset_reputation_handler(callback: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if callback.from_user.username != ADMIN_USERNAME:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    try:
        target_id = int(callback.data.split("_")[1])
        reset_reputation(target_id)

        await callback.message.edit_text(bold("–†–µ–ø—É—Ç–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞."))
        logger.info(f"–†–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except (ValueError, TelegramBadRequest):
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.", show_alert=True)

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@router.callback_query(F.data == "close")
async def close_handler(callback: types.CallbackQuery):
    await callback.message.delete()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())