import asyncio
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
ADMIN_USERNAME = "DxxmII"  # –ê–¥–º–∏–Ω—Å–∫–∏–π —é–∑–µ—Ä–Ω–µ–π–º

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("reputation.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    tg_id INTEGER PRIMARY KEY,
    username TEXT,
    reputation INTEGER DEFAULT 0
)
""")
conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ù–∞–π—Ç–∏"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_handler(message: types.Message):
    tg_id = message.from_user.id
    username = message.from_user.username or f"user_{tg_id}"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (tg_id, username) VALUES (?, ?)", (tg_id, username))
        conn.commit()
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {tg_id} (@{username})")

    await message.answer(
        f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    tg_id = message.from_user.id
    cursor.execute("SELECT reputation FROM users WHERE tg_id = ?", (tg_id,))
    user = cursor.fetchone()

    if user:
        reputation = user[0]
        await message.answer(f"**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: **{reputation}**")
    else:
        await message.answer("**–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å /start.**")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏"
@router.message(F.text == "–ù–∞–π—Ç–∏")
async def find_handler(message: types.Message):
    await message.answer("**–í–≤–µ–¥–∏—Ç–µ @—Ç–µ–≥ –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**")

# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text.regexp(r"^@|^\d+$"))
async def search_user_handler(message: types.Message):
    input_data = message.text.strip()
    user_info = None

    if input_data.startswith("@"):
        username = input_data[1:]
        cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        user_info = cursor.fetchone()
    elif input_data.isdigit():
        tg_id = int(input_data)
        cursor.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))
        user_info = cursor.fetchone()

    if user_info:
        tg_id, username, reputation = user_info
    else:
        try:
            tg_user = await bot.get_chat(input_data if input_data.startswith("@") else int(input_data))
            tg_id = tg_user.id
            username = tg_user.username or f"user_{tg_id}"

            cursor.execute("INSERT INTO users (tg_id, username) VALUES (?, ?)", (tg_id, username))
            conn.commit()
            reputation = 0
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {tg_id} (@{username})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await message.answer("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.**")
            return

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    buttons = [
        [InlineKeyboardButton(text="üü¢ +REP", callback_data=f"add_{tg_id}"),
         InlineKeyboardButton(text="üî¥ -REP", callback_data=f"sub_{tg_id}")]
    ]
    if message.from_user.username == ADMIN_USERNAME and username != ADMIN_USERNAME:
        buttons.append([InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é", callback_data=f"reset_{tg_id}")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    reputation_display = "‚àû" if username == ADMIN_USERNAME else reputation
    await message.answer(f"**–ü—Ä–æ—Ñ–∏–ª—å @{username}**\n\n–†–µ–ø—É—Ç–∞—Ü–∏—è: **{reputation_display}**", reply_markup=markup)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("add_"))
async def add_reputation(callback: types.CallbackQuery):
    tg_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE users SET reputation = reputation + 1 WHERE tg_id = ?", (tg_id,))
    conn.commit()
    await callback.answer("–†–µ–ø—É—Ç–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞!")

@router.callback_query(F.data.startswith("sub_"))
async def sub_reputation(callback: types.CallbackQuery):
    tg_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE users SET reputation = reputation - 1 WHERE tg_id = ?", (tg_id,))
    conn.commit()
    await callback.answer("–†–µ–ø—É—Ç–∞—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞!")

@router.callback_query(F.data.startswith("reset_"))
async def reset_reputation(callback: types.CallbackQuery):
    tg_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE users SET reputation = 0 WHERE tg_id = ?", (tg_id,))
    conn.commit()
    await callback.answer("–†–µ–ø—É—Ç–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
